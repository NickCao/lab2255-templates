kind: ClusterTask
apiVersion: tekton.dev/v1beta1
metadata:
  name: aib-builder-task
spec:
  params:
    # job parameters
    - name: job_id
      description: "the reference used to track the job and access its assets"
      type: string
      default: ""
    - name: component_id
      description: "the conponent_id the job belongs to"
      type: string
      default: ""
    # repo parameters
    - name: source-repo
      description: "source repo that contains the application code"
      type: string
      default: ""
    - name: source-branch
      description: "source branch to build from"
      type: string
      default: ""
    - name: tag
      type: string
      default: ""
    - name: container-image
      description: "aib container"
      type: string
      default: "quay.io/centos-sig-automotive/automotive-osbuild:latest"
    
  steps:
    - name: aib-build
      image: $(params.container-image)
      script: |
        #!/usr/bin/env bash

        set -eux

        osbuildPath="/usr/bin/osbuild"
        storePath="/_build"
        runTmp="/run/osbuild/"

        mkdir -p "$storePath"
        mkdir -p "$runTmp"

        if mountpoint -q "$osbuildPath"; then
            exit 0
        fi

        rootType="system_u:object_r:root_t:s0"
        chcon "$rootType" "$storePath"

        installType="system_u:object_r:install_exec_t:s0"
        if ! mountpoint -q "$runTmp"; then
          mount -t tmpfs tmpfs "$runTmp"
        fi

        destPath="$runTmp/osbuild"
        cp -p "$osbuildPath" "$destPath"
        chcon "$installType" "$destPath"

        mount --bind "$destPath" "$osbuildPath"

        cd $(workspaces.source.path)

        # hardcoded for now
        distro="autosd9" 
        arch="aarch64" 
        target="qemu" 
        mode="package" 
        export_format="qcow2"
        MANIFEST_FILE=$(workspaces.source.path)/manifests/simple.aib.yml
        # end hardcoded

        # Determine file extension
        if [ "$export_format" = "image" ]; then
          file_extension=".raw"
        elif [ "$export_format" = "qcow2" ]; then
          file_extension=".qcow2"
        else
          file_extension=".$export_format"
        fi

        cleanName=$distro-$target
        exportFile=${cleanName}${file_extension}

        mode_param=""
        if [ -n "$mode" ]; then
          mode_param="--mode $mode"
        fi

        CUSTOM_DEFS=""
        CUSTOM_DEFS_FILE="$(workspaces.source.path)/manifests/custom-definitions.env"
        if [ -f "$CUSTOM_DEFS_FILE" ]; then
          echo "Processing custom definitions from $CUSTOM_DEFS_FILE"
          while read -r line || [[ -n "$line" ]]; do
            for def in $line; do
              CUSTOM_DEFS+=" --define $def"
            done
          done < "$CUSTOM_DEFS_FILE"
        else
          echo "No custom-definitions.env file found"
        fi

        build_command="automotive-image-builder --verbose \
          build \
          $CUSTOM_DEFS \
          --distro $distro \
          --target $target \
          --arch=$arch \
          --build-dir=/output/_build \
          --export $export_format \
          --osbuild-manifest=/output/image.json \
          $mode_param \
          $MANIFEST_FILE \
          /output/${exportFile}"

        echo "Running the build command: $build_command"
        $build_command

        pushd /output
        ln -sf ./${exportFile} ./disk.img

        echo "copying build artifacts to shared workspace..."

        mkdir -p $(workspaces.source.path)/binaries
        
        cp -v /output/${exportFile} $(workspaces.source.path)/binaries/ || echo "Failed to copy ${exportFile}"

        cp -vL /output/disk.img $(workspaces.source.path)/binaries/${cleanName}${file_extension} || echo "Failed to copy disk.img"

        pushd $(workspaces.source.path)
        ln -sf ${exportFile} disk.img
        popd

        cp -v /output/image.json $(workspaces.source.path)/binaries/image.json || echo "Failed to copy image.json"

        echo "Contents of shared workspace:"
        ls -la $(workspaces.source.path)/
        ls -la $(workspaces.source.path)/binaries

      securityContext:
        capabilities: {}
        privileged: true
        seLinuxOptions:
          type: unconfined_t
      volumeMounts:
        - mountPath: /_build
          name: build-dir
        - mountPath: /output
          name: output-dir
        - mountPath: /run/osbuild
          name: run-dir
        - mountPath: /dev
          name: dev
  
  volumes:
    - emptyDir: {}
      name: build-dir
    - emptyDir: {}
      name: output-dir
    - emptyDir: {}
      name: run-dir
    - hostPath:
        path: /dev
      name: dev

  workspaces:
    - name: source
