---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: test-with-jumpstarter
  labels:
    backstage.io/kubernetes-id: ${{values.component_id | dump}}
    type: pipeline
  annotations:
    # The event we are targeting as seen from the webhook payload
    # this can be an array too, i.e: [pull_request, push]
    pipelinesascode.tekton.dev/on-event: "[pull_request]"

    # The branch or tag we are targeting (ie: main, refs/tags/*)
    pipelinesascode.tekton.dev/on-target-branch: "[main]"

    # Fetch the git-clone task from hub, we are able to reference later on it
    # with taskRef and it will automatically be embedded into our pipeline.
    pipelinesascode.tekton.dev/task: "[git-clone]"
    #pipelinesascode.tekton.dev/task-1: ".tekton/tasks/get-lease.yaml"

    # How many runs we want to keep.
    pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  params:
    # The variable with brackets are special to Pipelines as Code
    # They will automatically be expanded with the events from Github.
    - name: repo_url
      value: "{{ repo_url }}"
    - name: revision
      value: "{{ revision }}"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
    workspaces:
      - name: source-folder
      - name: basic-auth
    # always try to release a lease if something goes wrong
    finally:
      # - name: release
      #   params:
      #     - name: jmp-lease-id
      #       value: $(tasks.lease.results.jmp-lease-id)
      #   taskRef:
      #     kind: ClusterTask
      #     name: jumpstarter-release-lease
      #   workspaces:
      #     - name: jumpstarter-client-secret
      #       workspace: jumpstarter-client-secret
    tasks:
      - name: fetch-repository
        taskRef:
          name: git-clone
          kind: ClusterTask
        workspaces:
          - name: output
            workspace: source-folder
          - name: basic-auth
            workspace: basic-auth
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: $(params.revision)

  # here we define where do the workspace come from
  workspaces:
  - name: source-folder
    volumeClaimTemplate:
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
  # This workspace will inject secret to help the git-clone task to be able to
  # checkout the private repositories
  - name: basic-auth
    secret:
      secretName: "{{ git_auth_secret }}"


